{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shubh\\\\Pictures\\\\Camera Roll\\\\calendar-scheduler-master\\\\src\\\\components\\\\CalendarComponent\\\\CalendarCells.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport * as dateFns from \"date-fns\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport { getRemindersOfDate } from \"../../utils/date-functions\";\nimport NotificationsOutlinedIcon from '@material-ui/icons/NotificationsOutlined';\nimport IconButton from \"@material-ui/core/IconButton\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > svg': {\n      margin: theme.spacing(2)\n    }\n  },\n  iconHover: {\n    '&:hover': {\n      color: red[800]\n    },\n    zIndex: 10,\n    fontSize: 30,\n    position: \"relative\"\n  }\n}));\n\nconst CalendarCells = props => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    currentMonth,\n    selectedDate,\n    onDateClick,\n    onClickPopOver,\n    onClickReminderList,\n    reminders\n  } = props; //taking month's boundaries\n\n  const monthStart = dateFns.startOfMonth(currentMonth);\n  const monthEnd = dateFns.endOfMonth(monthStart); //taking begin and end of a Week - it can be starting from previous month\n\n  const startDate = dateFns.startOfWeek(monthStart);\n  const endDate = dateFns.endOfWeek(monthEnd);\n  const dateFormat = \"d\";\n  const rows = [];\n  let days = [];\n  let day = startDate;\n  let formattedDate = \"\";\n\n  while (day <= endDate) {\n    for (let i = 0; i < 7; i++) {\n      formattedDate = dateFns.format(day, dateFormat);\n      const cloneDay = day;\n      days.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: `col cell ${//disable/selected/nothing ternary operation\n        !dateFns.isSameMonth(day, monthStart) ? \"disabled\" : dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"}`,\n        key: day,\n        onClick: e => {\n          onDateClick(dateFns.toDate(cloneDay));\n          onClickPopOver(e);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      }, getRemindersOfDate(reminders, day).length > 0 ? /*#__PURE__*/React.createElement(IconButton, {\n        onClick: e => {\n          onDateClick(dateFns.toDate(cloneDay));\n          onClickReminderList(e);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(NotificationsOutlinedIcon, {\n        className: classes.iconHover,\n        color: \"error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      })) : null, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"number\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }, formattedDate), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }, formattedDate))); //next day...\n\n      day = dateFns.addDays(day, 1);\n    }\n\n    rows.push( /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      key: day,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, days));\n    days = [];\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 10\n    }\n  }, rows);\n};\n\n_s(CalendarCells, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CalendarCells;\nexport default CalendarCells;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarCells\");","map":{"version":3,"sources":["C:/Users/shubh/Pictures/Camera Roll/calendar-scheduler-master/src/components/CalendarComponent/CalendarCells.js"],"names":["React","dateFns","makeStyles","red","getRemindersOfDate","NotificationsOutlinedIcon","IconButton","useStyles","theme","root","margin","spacing","iconHover","color","zIndex","fontSize","position","CalendarCells","props","classes","currentMonth","selectedDate","onDateClick","onClickPopOver","onClickReminderList","reminders","monthStart","startOfMonth","monthEnd","endOfMonth","startDate","startOfWeek","endDate","endOfWeek","dateFormat","rows","days","day","formattedDate","i","format","cloneDay","push","isSameMonth","isSameDay","e","toDate","length","addDays"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as dateFns from \"date-fns\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport { getRemindersOfDate } from \"../../utils/date-functions\";\nimport NotificationsOutlinedIcon from '@material-ui/icons/NotificationsOutlined';\nimport IconButton from \"@material-ui/core/IconButton\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > svg': {\n      margin: theme.spacing(2),\n    },\n  },\n  iconHover: {\n    '&:hover': {\n      color: red[800],\n    },\n    zIndex: 10,\n    fontSize: 30,\n    position: \"relative\"\n  },\n}));\n\nconst CalendarCells = (props) => {\n\n  const classes = useStyles();\n\n  const { currentMonth,\n    selectedDate,\n    onDateClick,\n    onClickPopOver,\n    onClickReminderList,\n    reminders\n  } = props;\n\n  //taking month's boundaries\n  const monthStart = dateFns.startOfMonth(currentMonth);\n  const monthEnd = dateFns.endOfMonth(monthStart);\n\n  //taking begin and end of a Week - it can be starting from previous month\n  const startDate = dateFns.startOfWeek(monthStart);\n  const endDate = dateFns.endOfWeek(monthEnd);\n\n  const dateFormat = \"d\";\n\n  const rows = [];\n  let days = [];\n  let day = startDate;\n  let formattedDate = \"\";\n\n  while (day <= endDate) {\n    for (let i = 0; i < 7; i++) {\n      formattedDate = dateFns.format(day, dateFormat);\n\n      const cloneDay = day;\n\n      days.push(\n        <div\n          className={`col cell ${\n            //disable/selected/nothing ternary operation\n            !dateFns.isSameMonth(day, monthStart) ? \"disabled\" : (dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\") }`\n          }\n          key={day}\n          onClick={(e) => {\n            onDateClick(dateFns.toDate(cloneDay));\n            onClickPopOver(e);\n          }}\n        >\n\n          {\n            (getRemindersOfDate(reminders, day).length > 0) ? (\n\n              <IconButton onClick={(e) => {\n                  onDateClick(dateFns.toDate(cloneDay));\n                  onClickReminderList(e);\n                }}\n              >\n                <NotificationsOutlinedIcon\n                  className={classes.iconHover}\n                  color=\"error\"\n                />\n              </IconButton>\n            ) : null\n          }\n\n          <span className=\"number\">{formattedDate}</span>\n          <span className=\"bg\">{formattedDate}</span>\n        </div>\n      );\n\n      //next day...\n      day = dateFns.addDays(day, 1);\n    }\n\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    );\n    days = [];\n  }\n\n  return <div className=\"body\">{rows}</div>;\n}\n\n\nexport default CalendarCells;\n"]},"metadata":{},"sourceType":"module"}